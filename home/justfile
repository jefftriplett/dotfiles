PYPY_27 := "pypy2.7-7.3.2"
PYPY_36 := "pypy3.6-7.3.2"
PYTHON_27 := `pyenv latest --print 2.7`
PYTHON_35 := `pyenv latest --print 3.5`
PYTHON_36 := "3.6.13"
PYTHON_37 := `pyenv latest --print 3.7`
PYTHON_38 := `pyenv latest --print 3.8`
PYTHON_39 := `pyenv latest --print 3.9`
PYTHON_310 := `pyenv latest --print 3.10`
PYTHON_311 := "3.11.0a1"
PYTHON_ALL := PYTHON_39 + " " + PYTHON_38 + " " + PYTHON_37 + " " + PYTHON_310 + " " + PYTHON_311 + " " + PYTHON_36 + " " + PYTHON_35 + " " + PYTHON_27
DEFAULT_PYTHON_VERSION := PYTHON_39

# homebrew updates
alias cleanup := homebrew-cleanup
alias outdated := homebrew-outdated
alias symlink := homesick-symlink
alias update := homebrew-update

# service updates
alias restart := services-restart
alias stop := services-stop

@_default:
    just --list

@asdf-install:
    asdf install direnv latest
    asdf install golang latest
    asdf install nodejs latest
    asdf install ruby latest
    asdf install rust latest
    asdf install starship latest

    # asdf add nodejs 16.0.0
    # asdf add ruby 3.0.1
    # asdf add starship 0.44.0

@bootstrap:
    if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then \
        echo "==> Installing Homebrew dependencies..."; \
        brew bundle install; \
    fi

@freeze:
    cd "$HOME/.homesick/repos/dotfiles/home" && \
    mv Brewfile Brewfile.bak && \
    brew bundle dump

@homebrew-cleanup:
    brew cleanup --prune=0

@homebrew-outdated:
    brew update
    brew outdated
    PIP_REQUIRE_VIRTUALENV=false python -m pip list --outdated

@homebrew-update:
    brew update

@homebrew-upgrade:
    brew outdated
    brew upgrade || true
    just cleanup

@homesick-symlink:
    homesick symlink

@install-xcode:
    sudo xcode-select --install

@pip-update:
    for version in `pyenv versions --bare`; do \
        echo "Upgrading Python ${version}"; \
    done

    eval "$(pyenv init --path)" && eval "$(pyenv init -)" && pyenv shell {{ PYTHON_ALL }}

    # #!/usr/bin/env sh
    # set -euxo pipefail
    # for version in `pyenv versions --bare` ; do \
    #     echo "Upgrading Python ${version}"; \
    #     # pyenv shell ${version}; \
    # done
    # pyenv shell {{ PYTHON_ALL }}

@pipx-upgrade:
    pipx upgrade-all --force

@postgresql-upgrade:
    brew unpin postgresql
    brew upgrade postgresql
    brew pin postgresql
    brew postgresql-upgrade-database

pyenv-global:
    pyenv global {{ PYTHON_ALL }}

@pyenv-upgrade +ARGS="--skip-existing":
    just pyenv-upgrade-all {{ ARGS }}
    just python-update

@pyenv-upgrade-all +ARGS="--skip-existing":
    -pyenv install {{ ARGS }} 3.5:latest
    -pyenv install {{ ARGS }} 3.6.13
    -pyenv install {{ ARGS }} 3.7:latest
    -pyenv install {{ ARGS }} 3.8:latest
    -pyenv install {{ ARGS }} 3.9:latest
    -pyenv install {{ ARGS }} 3.10:latest
    -pyenv install {{ ARGS }} 3.11:latest
    -pyenv install {{ ARGS }} 2.7:latest
    -just pyenv-global

@python-update:
    PIP_REQUIRE_VIRTUALENV=false python -m pip install --upgrade \
        pip \
        pipx \
        virtualenv \
        virtualenvwrapper
    pyenv update
    pyenv global {{ PYTHON_ALL }}

    # pipx install python-language-server[all]
    # pipx inject python-language-server pyls-black mypy-ls pyls-isort

@services:
    brew services

@services-restart:
    brew services restart yabai
    # brew services restart spacebar
    # brew services restart skhd

@services-stop:
    -brew services stop yabai
    -brew services stop spacebar
    -brew services stop skhd

@topalias:
    topalias

@upgrade:
    just homebrew-update
    just homebrew-upgrade

@upgrade-xcode:
    sudo rm -rf /Library/Developer/CommandLineTools
    just install-xcode

@workon:
    for filename in $(ls -d ~/.virtualenvs/*/); do \
        echo "$filename"; \
        $filename/bin/python --version; \
        $filename/bin/python -m pip --version; \
        echo; \
    done

@virtualenv-upgrade:
    for filename in $(ls -d ~/.virtualenvs/*/); do \
        echo "$filename"; \
        $filename/bin/python --version; \
        $filename/bin/python -m pip --version; \
        $filename/bin/python -m pip install --upgrade pip; \
        echo; \
    done

# @virtualenv-upgrade:
#     # TODO: https://stackoverflow.com/questions/44692668/python-how-can-i-update-python-version-in-pyenv-virtual-environment
#     # pip freeze > requirements-lock.txt
#     # pyenv virtualenv-delete a-virtualenv-name
#     # pyenv virtualenv 3.9.0 a-virtualenv-name
#     # pip install -r requirements-lock.txt
#     # rm requirements-lock.txt
