set dotenv-load := false
set export := true

# set unstable := true

export HOMEBREW_NO_ENV_HINTS := "true"
export JUST_UNSTABLE := "true"
export PIP_REQUIRE_VIRTUALENV := "false"

# export HOMEBREW_NO_AUTO_UPDATE := "true"

mod homebrew '.justfiles/homebrew.justfile'
mod llm '.justfiles/llm.justfile'
mod macos '.justfiles/macos.justfile'
mod ollama '.justfiles/ollama.justfile'
mod virtualenv '.justfiles/virtualenv.justfile'
mod virtualenvwrapper '.justfiles/virtualenvwrapper.justfile'

HOST := `hostname -s`
python_310 := `pyenv latest 3.10`
python_311 := `pyenv latest 3.11`
python_312 := `pyenv latest 3.12`
python_313 := `pyenv latest 3.13`
python_39 := `pyenv latest 3.9`
RICH_THEME := "dracula"

alias lock := freeze

# ----------------------------------------------------------------
# In the spirit of "Scripts to rule them all"
# ----------------------------------------------------------------

[private]
@default:
    just --list

# installs/updates all dependencies
@bootstrap:
    if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then \
        echo "==> Installing Homebrew dependencies..."; \
        brew bundle install; \
    fi

    just _macos-xcode-bootstrap
    just _mise-bootstrap
    just _python-bootstrap

# clean up old homebrew packages and casks
@cleanup DAYS="0":
    just homebrew::cleanup {{ DAYS }}

# format and overwrite justfile
@fmt:
    just --fmt --unstable
    just homebrew fmt
    just llm fmt
    just macos fmt
    just ollama fmt
    just virtualenv fmt
    just virtualenvwrapper fmt

# Updates our lockfiles without installing dependencies
@freeze:
    just homebrew::freeze

# generate a commit message using llm template
@git-commit-msg:
    git diff --cached | llm -t git-commit-msg --option num_predict 20

# create symlinks for dotfiles using homesick
@install:
    homesick symlink

# list outdated packages from homebrew and pip
@outdated:
    just homebrew::outdated
    PIP_REQUIRE_VIRTUALENV=false python -m pip list --outdated

# restart homebrew services
@restart:
    just homebrew::services-restart

# stop all homebrew services
@stop:
    just homebrew::services-stop

# updates a project to run at its current version
@update:
    just upgrade
    just restart
    just cleanup

# update and upgrade homebrew packages
@upgrade:
    just homebrew::update
    just homebrew::upgrade
    # just homebrew::cleanup

# upgrade all tools (pyenv and mise packages)
@upgrade-all:
    just pyenv-upgrade-all
    mise install
    mise reshim


# ----------------------------------------------------------------
# mise - https://github.com/jdx/mise
# ----------------------------------------------------------------

# bootstrap mise by installing configured language versions
@_mise-bootstrap:
    mise install golang
    mise install node
    mise install ruby
    mise install rust
    mise reshim
    # mise current
    # mise list

# ----------------------------------------------------------------
# Postgres related
# ----------------------------------------------------------------

# upgrade postgresql to latest version and migrate databases
@postgresql-upgrade:
    brew unpin postgresql
    brew upgrade postgresql
    brew pin postgresql
    brew postgresql-upgrade-database

# ----------------------------------------------------------------
# Python recipes
# ----------------------------------------------------------------

# install python packages using uv pip installer
@pip-install *ARGS:
    python -m uv pip install \
        --system \
        --upgrade \
        {{ ARGS }}

# uninstall python packages using uv pip installer
@pip-uninstall *ARGS:
    python -m uv pip uninstall \
        --system \
        {{ ARGS }}

# bootstrap python environment with essential packages
@_python-bootstrap:
    PIP_REQUIRE_VIRTUALENV=false python -m pip install \
            --disable-pip-version-check \
            --no-compile \
            --upgrade \
        pip uv

    python -m uv pip install \
            --system \
            --upgrade \
        virtualenv \
        virtualenvwrapper \
        wheel

# update python environment and pyenv settings
@python-update:
    just _python-bootstrap
    just _pyenv-update
    just _pyenv-set-global

# ----------------------------------------------------------------
# Python / pyenv recipes - https://github.com/pyenv/pyenv
# ----------------------------------------------------------------

# set global python versions in pyenv
@_pyenv-set-global:
    pyenv global \
        {{ python_312 }} \
        {{ python_311 }} \
        {{ python_310 }} \
        {{ python_39 }}

# update pyenv itself to latest version
@_pyenv-update:
    pyenv update

# upgrade python and update pyenv configuration
@pyenv-upgrade +ARGS="--skip-existing":
    just pyenv-upgrade-all {{ ARGS }}
    just python-update

# install or upgrade all python versions managed by pyenv
@pyenv-upgrade-all +ARGS="--skip-existing":
    -pyenv install {{ ARGS }} 3.13:latest
    -pyenv install {{ ARGS }} 3.12:latest
    -pyenv install {{ ARGS }} 3.11:latest
    -pyenv install {{ ARGS }} 3.10:latest
    -pyenv install {{ ARGS }} 3.9:latest

    just _pyenv-set-global

# ----------------------------------------------------------------
# Python / UV recipes - https://docs.astral.sh/uv/
# ----------------------------------------------------------------

# install python versions using uv installer
@uv-python-install *ARGS:
    -uv python install {{ ARGS }} 3.13
    -uv python install {{ ARGS }} 3.12
    -uv python install {{ ARGS }} 3.11
    -uv python install {{ ARGS }} 3.10
    -uv python install {{ ARGS }} 3.9

# reinstall python versions using uv installer
@uv-python-reinstall *ARGS:
    just uv-python-install --reinstall

# install common python CLI tools using uv installer
@uv-tool-install *ARGS:
    -uv tool install --python {{ python_312 }} aider-install {{ ARGS }}
    -uv tool install --python {{ python_312 }} cogapp {{ ARGS }}
    -uv tool install --python {{ python_312 }} files-to-claude-xml {{ ARGS }}
    -uv tool install --python {{ python_312 }} grip {{ ARGS }}
    -uv tool install --python {{ python_312 }} justpath {{ ARGS }}
    -uv tool install --python {{ python_312 }} llm {{ ARGS }}
    -uv tool install --python {{ python_312 }} pyright {{ ARGS }}
    -uv tool install --python {{ python_312 }} rich-cli {{ ARGS }}
    -uv tool install --python {{ python_312 }} ruff-lsp {{ ARGS }}
    -uv tool install --python {{ python_312 }} ttok {{ ARGS }}
    -uv tool install --python {{ python_312 }} yt-dlp[default] {{ ARGS }}

# ----------------------------------------------------------------
# Useful tailscale/golink shortcuts
# ----------------------------------------------------------------

# open documentation in browser using tailscale/golinks
@open-docs:
    open http://go/docs

# open tailscale/golinks homepage
@open-go:
    open http://go

# open Home Assistant interface in browser
@open-ha:
    open http://go/homeassistant

# open Syncthing interface in browser
@open-syncthing:
    open http://go/syncthing

# ----------------------------------------------------------------
# TODO: ...
# ----------------------------------------------------------------

# open Claude desktop configuration file in Sublime Text
@open-claude-desktop-config:
    subl ~/Library/Application\ Support/Claude/claude_desktop_config.json

# Kill all Chrome tabs to improve performance, decrease battery usage, and save memory.
@kill-tabs:
    bunx kill-tabs

# update Brewfile from cog template
@_update-brewfile:
    cd "$HOME/.homesick/repos/dotfiles/home" && uv run --with cogapp cog -Pr ./Brewfile.cog

# update README.md docs using cog
@_update-readme-docs:
    cd "$HOME/.homesick/repos/dotfiles" && uv run --with cogapp cog -Pr ./README.md
