set dotenv-load := false

PYPY_27 := "pypy2.7-7.3.2"
PYPY_36 := "pypy3.6-7.3.2"
PYTHON_27 := `pyenv latest 2.7`
PYTHON_35 := `pyenv latest 3.5`
PYTHON_36 := `pyenv latest 3.6`
PYTHON_37 := `pyenv latest 3.7`
PYTHON_38 := `pyenv latest 3.8`
PYTHON_39 := `pyenv latest 3.9`
PYTHON_310 := `pyenv latest 3.10`
PYTHON_311 := `pyenv latest 3.11`
PYTHON_312 := "3.12-dev"
DEFAULT_PYTHON_VERSION := PYTHON_310

@_default:
    just --list

# homebrew and general wrappers

@cleanup DAYS="0":
    just _homebrew-cleanup {{ DAYS }}

@freeze:
    just _homebrew-freeze

@outdated:
    just _homebrew-outdated

@restart:
    just _homebrew-services-restart

@stop:
    just _homebrew-services-stop

@symlink:
    just homesick-symlink

@update:
    just _homebrew-update

@upgrade:
    just _homebrew-update
    just _homebrew-upgrade
    just _homebrew-cleanup

# everything else

@bootstrap:
    if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then \
        echo "==> Installing Homebrew dependencies..."; \
        brew bundle install; \
    fi
    just _asdf-install
    just _xcode-install

@fmt:
    just --fmt --unstable

# homebrew: https://brew.sh/

@_homebrew-cleanup DAYS="0":
    brew cleanup --prune={{ DAYS }}

@_homebrew-freeze:
    cd "$HOME/.homesick/repos/dotfiles/home" && \
        mv Brewfile Brewfile.bak && \
        brew bundle dump

@_homebrew-outdated:
    brew outdated
    PIP_REQUIRE_VIRTUALENV=false python -m pip list --outdated

@homebrew-services:
    brew services

@_homebrew-services-restart:
    brew services restart yabai
    # brew services restart spacebar
    # brew services restart skhd

@_homebrew-services-stop:
    -brew services stop yabai
    -brew services stop spacebar
    -brew services stop skhd

@homesick-symlink:
    homesick symlink

@_homebrew-update:
    brew update

@_homebrew-upgrade:
    brew upgrade || true

# asdf: https://asdf-vm.com/

@_asdf-install:
    asdf plugin update golang
    asdf plugin update kubectl
    asdf plugin update nodejs
    asdf plugin update ruby
    asdf plugin update rust

    asdf install golang latest
    asdf install kubectl latest
    asdf install nodejs latest
    asdf install nodejs lts
    asdf install ruby latest
    asdf install rust latest

    asdf reshim

    asdf global golang latest
    asdf global kubectl 1.22.2
    asdf global nodejs latest
    asdf global ruby latest
    asdf global rust latest

    asdf current

    asdf list

# Xcode
@_xcode-install:
    sudo xcode-select --install

@xcode-upgrade:
    sudo rm -rf /Library/Developer/CommandLineTools
    just _xcode-install

# Kill all Chrome tabs to improve performance, decrease battery usage, and save memory.
@kill-tabs:
    npx kill-tabs

# @pip-update:
#     for version in `pyenv versions --bare`; do \
#         echo "Upgrading Python ${version}"; \
#     done
#
#     eval "$(pyenv init --path)" && eval "$(pyenv init -)" && pyenv shell {{ PYTHON_ALL }}
#
#     # #!/usr/bin/env sh
#     # set -euxo pipefail
#     # for version in `pyenv versions --bare` ; do \
#     #     echo "Upgrading Python ${version}"; \
#     #     # pyenv shell ${version}; \
#     # done
#     # pyenv shell {{ PYTHON_ALL }}
# pipx: https://pypa.github.io/pipx/

@pipx-upgrade:
    pipx upgrade-all --force

# Postgres related

@postgresql-upgrade:
    brew unpin postgresql
    brew upgrade postgresql
    brew pin postgresql
    brew postgresql-upgrade-database

# pyenv: https://github.com/pyenv/pyenv

@pyenv-set-global:
    pyenv global \
        {{ PYTHON_310 }} \
        {{ PYTHON_311 }} \
        {{ PYTHON_312 }} \
        {{ PYTHON_39 }} \
        {{ PYTHON_38 }} \
        {{ PYTHON_37 }} \
        {{ PYTHON_36 }} \
        {{ PYTHON_27 }}

@pyenv-upgrade +ARGS="--skip-existing":
    just pyenv-upgrade-all {{ ARGS }}
    just python-update

@pyenv-upgrade-all +ARGS="--skip-existing":
    -pyenv install {{ ARGS }} 3.5:latest
    -pyenv install {{ ARGS }} 3.6:latest
    -pyenv install {{ ARGS }} 3.7:latest
    -pyenv install {{ ARGS }} 3.8:latest
    -pyenv install {{ ARGS }} 3.9:latest
    -pyenv install {{ ARGS }} 3.10:latest
    -pyenv install {{ ARGS }} 3.11:latest
    -pyenv install {{ ARGS }} 3.12:dev
    -pyenv install {{ ARGS }} 2.7:latest
    just pyenv-set-global

# Python

@python-update:
    PIP_REQUIRE_VIRTUALENV=false python -m pip install \
            --disable-pip-version-check \
            --no-compile \
            --upgrade \
        pip \
        pipx \
        setuptools \
        virtualenv \
        virtualenvwrapper \
        wheel

    pyenv update

    just pyenv-set-global

    # pipx install python-language-server[all]
    # pipx inject python-language-server pyls-black mypy-ls pyls-isort

@topalias:
    topalias

@update-readme-docs:
    cd "$HOME/.homesick/repos/dotfiles" && pipx run --spec cogapp cog -Pr ./README.md

@timemachine:
    # PSA: https://apple.stackexchange.com/questions/382772/time-machine-in-the-cleaning-up-state-forever
    sudo sysctl debug.lowpri_throttle_enabled=0
    # once done
    # sudo sysctl debug.lowpri_throttle_enabled=1

# virtualenv: https://virtualenv.pypa.io/en/latest/

@virtualenv-scan:
    #!/usr/bin/env python
    import subprocess
    from pathlib import Path

    folders = [folder for folder in Path(Path.home(), ".virtualenvs").glob("*/bin/python")]
    print(len(folders))
    for command in folders:
        print(command)
        try:
            # grab python version
            output = subprocess.run(f"{command} --version".split(), capture_output=True, text=True)
            print(output.stdout.strip() or output.stderr.strip())

            # grab pip version
            # output = subprocess.run(f"{command} --version".replace("python", "pip").split(), capture_output=True, text=True)
            # print(output.stdout.strip() or output.stderr.strip())

        except FileNotFoundError as e:
            pass

@virtualenv-upgrade:
    for filename in $(ls -d ~/.virtualenvs/*/); do \
        echo "$filename"; \
        $filename/bin/python --version; \
        $filename/bin/python -m pip --version; \
        $filename/bin/python -m pip install --upgrade pip; \
        echo; \
    done

# @virtualenv-upgrade:
#     # TODO: https://stackoverflow.com/questions/44692668/python-how-can-i-update-python-version-in-pyenv-virtual-environment
#     # pip freeze > requirements-lock.txt
#     # pyenv virtualenv-delete a-virtualenv-name
#     # pyenv virtualenv 3.9.0 a-virtualenv-name
#     # pip install -r requirements-lock.txt
# # rm requirements-lock.txt

@workon:
    for filename in $(ls -d ~/.virtualenvs/*/); do \
        echo "$filename"; \
        $filename/bin/python --version; \
        $filename/bin/python -m pip --version; \
        echo; \
    done
