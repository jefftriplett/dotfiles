set dotenv-load := false
set export := true

# export HOMEBREW_NO_AUTO_UPDATE := "true"

export HOMEBREW_NO_ENV_HINTS := "true"

HOST := `hostname -s`

RICH_THEME := "dracula"
python_39 := `pyenv latest 3.9`
python_310 := `pyenv latest 3.10`
python_311 := `pyenv latest 3.11`
python_312 := `pyenv latest 3.12`

# ----------------------------------------------------------------
# Just nice-to-haves
# ----------------------------------------------------------------

@_default:
    just --list
    just --justfile ~/.justfiles/ollama.just --list --list-heading "" --list-prefix "    ollama "

# format and overwrite justfile
@fmt:
    just --fmt --unstable

# ----------------------------------------------------------------
# In the spirit of "Scripts to rule them all"
# ----------------------------------------------------------------

# installs/updates all dependencies
@bootstrap:
    if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then \
        echo "==> Installing Homebrew dependencies..."; \
        brew bundle install; \
    fi

    just _xcode-bootstrap
    just _mise-bootstrap
    just _python-bootstrap

@install:
    homesick symlink

# Updates our lockfiles without installing dependencies
@lock:
    just _homebrew-lock

@outdated:
    just _homebrew-outdated
    PIP_REQUIRE_VIRTUALENV=false python -m pip list --outdated

@restart:
    just _homebrew-services-restart

@stop:
    just _homebrew-services-stop

# updates a project to run at its current version
@update:
    just _homebrew-update

@upgrade:
    just _homebrew-update
    just _homebrew-upgrade
    # just _homebrew-cleanup

# ----------------------------------------------------------------
# Homebrew and general wrappers - https://brew.sh
# ----------------------------------------------------------------

@_homebrew-cleanup DAYS="0":
    brew cleanup --prune={{ DAYS }}

@_homebrew-lock:
    cd "$HOME/.homesick/repos/dotfiles/home" && \
        mv "Brewfile.$HOST" "Brewfile.$HOST.bak" && \
        brew bundle dump --file="Brewfile.$HOST"

@_homebrew-outdated:
    brew outdated

@homebrew-services:
    brew services

@_homebrew-services-restart:
    # -brew services restart skhd
    # -brew services restart spacebar
    # -brew services restart yabai
    -brew services restart ollama

@_homebrew-services-stop:
    # -brew services stop yabai
    # -brew services stop spacebar
    # -brew services stop skhd
    -brew services stop ollama

@_homebrew-update:
    brew update

@_homebrew-upgrade:
    brew upgrade || true

@cleanup DAYS="0":
    just _homebrew-cleanup {{ DAYS }}

# ----------------------------------------------------------------
# mise - https://github.com/jdx/mise
# ----------------------------------------------------------------

@_mise-bootstrap:
    mise install golang
    mise install node
    mise install ruby
    mise install rust
    mise reshim
    # mise current
    # mise list

# ----------------------------------------------------------------
# Ollama related
# ----------------------------------------------------------------

@ollama *ARGS:
    just --justfile ~/.justfiles/ollama.just {{ ARGS }}

# ----------------------------------------------------------------
# Postgres related
# ----------------------------------------------------------------

@postgresql-upgrade:
    brew unpin postgresql
    brew upgrade postgresql
    brew pin postgresql
    brew postgresql-upgrade-database

# ----------------------------------------------------------------
# Python
#   pipx - https://pypa.github.io/pipx/
#   pyenv - https://github.com/pyenv/pyenv
# ----------------------------------------------------------------

@pip-install *ARGS:
    PIP_REQUIRE_VIRTUALENV=false python -m pip install \
            --disable-pip-version-check \
            --no-compile \
            --upgrade \
        {{ ARGS }}

@pip-uninstall *ARGS:
    PIP_REQUIRE_VIRTUALENV=false python -m pip uninstall \
            --disable-pip-version-check \
        {{ ARGS }}

@pipx-upgrade:
    pipx upgrade-all --force

@_python-bootstrap:
    PIP_REQUIRE_VIRTUALENV=false python -m pip install \
            --disable-pip-version-check \
            --no-compile \
            --upgrade \
        pip \
        pipx \
        virtualenv \
        virtualenvwrapper \
        wheel \

    # cogapp
    # rich-cli

@python-update:
    just _python-bootstrap
    just _pyenv-update
    just _pyenv-set-global

    # pipx install python-language-server[all]
    # pipx inject python-language-server pyls-black mypy-ls pyls-isort

# @pip-update:
#     for version in `pyenv versions --bare`; do \
#         echo "Upgrading Python ${version}"; \
#     done
#
#     eval "$(pyenv init --path)" && eval "$(pyenv init -)" && pyenv shell {{ PYTHON_ALL }}
#
#     # #!/usr/bin/env sh
#     # set -euxo pipefail
#     # for version in `pyenv versions --bare` ; do \
#     #     echo "Upgrading Python ${version}"; \
#     #     # pyenv shell ${version}; \
#     # done
#     # pyenv shell {{ PYTHON_ALL }}
# pipx: https://pypa.github.io/pipx/

@_pyenv-set-global:
    pyenv global \
        {{ python_311 }} \
        {{ python_312 }} \
        {{ python_310 }} \
        {{ python_39 }}

@_pyenv-update:
    pyenv update

@pyenv-upgrade +ARGS="--skip-existing":
    just pyenv-upgrade-all {{ ARGS }}
    just python-update

@pyenv-upgrade-all +ARGS="--skip-existing":
    -pyenv install {{ ARGS }} 3.12:latest
    -pyenv install {{ ARGS }} 3.11:latest
    -pyenv install {{ ARGS }} 3.10:latest
    -pyenv install {{ ARGS }} 3.9:latest

    just _pyenv-set-global

# ----------------------------------------------------------------
# Python / virtualenv - https://virtualenv.pypa.io/en/latest/
# ----------------------------------------------------------------

virtualenv-scan:
    #!/usr/bin/env python
    import subprocess
    from pathlib import Path

    folders = [folder for folder in Path(Path.home(), ".virtualenvs").glob("*/bin/python")]
    # print(len(folders))
    for command in folders:
        # print(command)
        try:
            # grab python version
            output = subprocess.run(f"{command} --version".split(), capture_output=True, text=True)
            print(output.stdout.strip() or output.stderr.strip())

            # grab pip version
            # output = subprocess.run(f"{command} --version".replace("python", "pip").split(), capture_output=True, text=True)
            # print(output.stdout.strip() or output.stderr.strip())

        except FileNotFoundError as e:
            pass

@virtualenv-upgrade:
    for filename in $(ls -d ~/.virtualenvs/*/); do \
        echo "$filename"; \
        $filename/bin/python --version; \
        $filename/bin/python -m pip --version; \
        $filename/bin/python -m pip install --upgrade pip; \
        echo; \
    done

    # TODO: finish researching this pattern...
    # https://stackoverflow.com/questions/44692668/python-how-can-i-update-python-version-in-pyenv-virtual-environment

    # pip freeze > requirements.lock
    # pyenv virtualenv-delete a-virtualenv-name
    # pyenv virtualenv 3.9.0 a-virtualenv-name
    # pip install -r requirements.lock
    # rm requirements.lock

@virtualenv-workon:
    for filename in $(ls -d ~/.virtualenvs/*/); do \
        echo "$filename"; \
        $filename/bin/python --version; \
        $filename/bin/python -m pip --version; \
        echo; \
    done

# ----------------------------------------------------------------
# TODO: ...
# ----------------------------------------------------------------

@open-syncthing:
    open http://go/syncthing

# Kill all Chrome tabs to improve performance, decrease battery usage, and save memory.
@kill-tabs:
    npx kill-tabs

@plist:
    cp ~/.plists/homebrew.mxcl.ollama.plist /opt/homebrew/Cellar/ollama/0.1.23/homebrew.mxcl.ollama.plist

@topalias:
    topalias

@_update-brewfile:
    cd "$HOME/.homesick/repos/dotfiles/home" && pipx run --no-cache --quiet --spec cogapp cog -Pr ./Brewfile.cog

@_update-readme-docs:
    cd "$HOME/.homesick/repos/dotfiles" && pipx run --no-cache --quiet --spec cogapp cog -Pr ./README.md

# ----------------------------------------------------------------
# Time Machine
# ----------------------------------------------------------------

@timemachine-boost:
    # bump IO priority to finish more quickly
    # https://apple.stackexchange.com/questions/382772/time-machine-in-the-cleaning-up-state-forever

    sudo sysctl debug.lowpri_throttle_enabled=0

@timemachine-boost-complete:
    # once done
    sudo sysctl debug.lowpri_throttle_enabled=1

@timemachine-delete *ARGS:
    sudo tmutil delete {{ ARGS }}

@timemachine-list:
    sudo tmutil listbackups

# ----------------------------------------------------------------
# VS Code
# ----------------------------------------------------------------

@_vs_code-lock:
    code --list-extensions > vs-code-extensions.txt

# ----------------------------------------------------------------
# Xcode
# ----------------------------------------------------------------

@_xcode-bootstrap:
    sudo xcode-select --install

@xcode-upgrade:
    sudo rm -rf /Library/Developer/CommandLineTools
    just _xcode-bootstrap

# ----------------------------------------------------------------
# virtualenvwrapper
# ----------------------------------------------------------------

_get_env_details:
    #!/usr/bin/env sh
    rich --print "[green]get_env_details[/green]"

_initialize:
    #!/usr/bin/env sh
    rich --print "[green]initialize[/green]"

_postactivate:
    #!/usr/bin/env sh
    VIRTUAL_ENV_NAME=$(basename "${VIRTUAL_ENV}")
    rich --print "[green]postactivate[/green]"

_postdeactivate:
    #!/usr/bin/env sh
    # VIRTUAL_ENV_NAME=$(basename "${VIRTUAL_ENV}")
    rich --print "[green]postdeactivate[/green]"

_postmkproject:
    #!/usr/bin/env sh
    rich --print "[green]postmkproject[/green]"

_postmkvirtualenv:
    #!/usr/bin/env sh
    rich --print "[green]postmkvirtualenv[/green]"
    python -m pip install --upgrade pip
    python -m pip install --upgrade pip-tools

_postrmproject:
    #!/usr/bin/env sh
    rich --print "[green]postrmproject[/green]"

_postrmvirtualenv:
    #!/usr/bin/env sh
    rich --print "[green]postrmvirtualenv[/green]"

_preactivate:
    #!/usr/bin/env sh
    # VIRTUAL_ENV_NAME=$(basename "${VIRTUAL_ENV}")
    rich --print "[green]preactivate[/green]"

_predeactivate:
    #!/usr/bin/env sh
    rich --print "[green]predeactivate[/green]"

_premkproject:
    #!/usr/bin/env sh
    rich --print "[green]premkproject[/green]"

_premkvirtualenv:
    #!/usr/bin/env sh
    rich --print "[green]premkvirtualenv[/green]"

_prermproject:
    #!/usr/bin/env sh
    rich --print "[green]prermproject[/green]"

_prermvirtualenv:
    #!/usr/bin/env sh
    rich --print "[green]prermvirtualenv[/green]"
