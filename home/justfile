set dotenv-load := false
set export := true
# set unstable := true

export JUST_UNSTABLE := "true"

import '.justfiles/macos.just'
import '.justfiles/ollama.just'
import '.justfiles/virtualenv.just'
import '.justfiles/virtualenvwrapper.just'

# export HOMEBREW_NO_AUTO_UPDATE := "true"

export HOMEBREW_NO_ENV_HINTS := "true"
export PIP_REQUIRE_VIRTUALENV := "false"
HOST := `hostname -s`
python_310 := `pyenv latest 3.10`
python_311 := `pyenv latest 3.11`
python_312 := `pyenv latest 3.12`
python_39 := `pyenv latest 3.9`
RICH_THEME := "dracula"

alias lock := freeze

# ----------------------------------------------------------------
# In the spirit of "Scripts to rule them all"
# ----------------------------------------------------------------

@_default:
    just --list

# installs/updates all dependencies
@bootstrap:
    if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then \
        echo "==> Installing Homebrew dependencies..."; \
        brew bundle install; \
    fi

    just _macos-xcode-bootstrap
    just _mise-bootstrap
    just _python-bootstrap

@cleanup DAYS="0":
    just _homebrew-cleanup {{ DAYS }}

# format and overwrite justfile
@fmt:
    just --fmt --unstable

# Updates our lockfiles without installing dependencies
@freeze:
    just _homebrew-freeze

@git-commit-msg:
    git diff --cached | llm -t git-commit-msg --option num_predict 20

@install:
    homesick symlink

@outdated:
    just _homebrew-outdated
    PIP_REQUIRE_VIRTUALENV=false python -m pip list --outdated

@restart:
    just _homebrew-services-restart

@stop:
    just _homebrew-services-stop

# updates a project to run at its current version
@update:
    just _homebrew-update

@upgrade:
    just _homebrew-update
    just _homebrew-upgrade
    # just _homebrew-cleanup

@upgrade-all:
    just pipx-upgrade-all
    just pyenv-upgrade-all
    mise install
    mise reshim

# ----------------------------------------------------------------
# Homebrew and general wrappers - https://brew.sh
# ----------------------------------------------------------------

@_homebrew-cleanup DAYS="0":
    brew cleanup --prune={{ DAYS }}

@_homebrew-freeze:
    # touch "$HOME/.homesick/repos/dotfiles/home/Brewfile.$HOST"
    cd "$HOME/.homesick/repos/dotfiles/home" && \
        mv "Brewfile.$HOST" "Brewfile.$HOST.bak" && \
        brew bundle dump --file="Brewfile.$HOST"

@_homebrew-outdated:
    brew outdated

@homebrew-services:
    brew services

_homebrew-services-restart:
    #!/bin/bash

    # Get the list of started services
    started_services=$(brew services list | awk '$2 == "started" {print $1}')

    # Loop through each service and restart it
    for service in $started_services; do
        # echo "Restarting $service..."
        brew services restart $service
    done

    # echo "All started services have been restarted."

@_homebrew-services-stop:
    # -brew services stop yabai
    # -brew services stop spacebar
    # -brew services stop skhd
    -brew services stop ollama

@_homebrew-update:
    brew update

@_homebrew-upgrade:
    brew upgrade || true

# ----------------------------------------------------------------
# mise - https://github.com/jdx/mise
# ----------------------------------------------------------------

@_mise-bootstrap:
    mise install golang
    mise install node
    mise install ruby
    mise install rust
    mise reshim
    # mise current
    # mise list

# ----------------------------------------------------------------
# Postgres related
# ----------------------------------------------------------------

@postgresql-upgrade:
    brew unpin postgresql
    brew upgrade postgresql
    brew pin postgresql
    brew postgresql-upgrade-database

# ----------------------------------------------------------------
# Python
#   pipx - https://pypa.github.io/pipx/
#   pyenv - https://github.com/pyenv/pyenv
# ----------------------------------------------------------------

@pip-install *ARGS:
    python -m uv pip install \
        --system \
        --upgrade \
        {{ ARGS }}

@pip-uninstall *ARGS:
    python -m uv pip uninstall \
        --system \
        {{ ARGS }}

@pipx-upgrade-all:
    pipx upgrade-all --force

@_python-bootstrap:
    PIP_REQUIRE_VIRTUALENV=false python -m pip install \
            --disable-pip-version-check \
            --no-compile \
            --upgrade \
        pip uv

    python -m uv pip install \
            --system \
            --upgrade \
        pipx \
        virtualenv \
        virtualenvwrapper \
        wheel

@python-update:
    just _python-bootstrap
    just _pyenv-update
    just _pyenv-set-global

    # pipx install python-language-server[all]
    # pipx inject python-language-server pyls-black mypy-ls pyls-isort

# @pip-update:
#     for version in `pyenv versions --bare`; do \
#         echo "Upgrading Python ${version}"; \
#     done
#
#     eval "$(pyenv init --path)" && eval "$(pyenv init -)" && pyenv shell {{ PYTHON_ALL }}
#
#     # #!/usr/bin/env sh
#     # set -euxo pipefail
#     # for version in `pyenv versions --bare` ; do \
#     #     echo "Upgrading Python ${version}"; \
#     #     # pyenv shell ${version}; \
#     # done
#     # pyenv shell {{ PYTHON_ALL }}
# pipx: https://pypa.github.io/pipx/

@_pyenv-set-global:
    pyenv global \
        {{ python_311 }} \
        {{ python_312 }} \
        {{ python_310 }} \
        {{ python_39 }}

@_pyenv-update:
    pyenv update

@pyenv-upgrade +ARGS="--skip-existing":
    just pyenv-upgrade-all {{ ARGS }}
    just python-update

@pyenv-upgrade-all +ARGS="--skip-existing":
    -pyenv install {{ ARGS }} 3.12:latest
    -pyenv install {{ ARGS }} 3.11:latest
    -pyenv install {{ ARGS }} 3.10:latest
    -pyenv install {{ ARGS }} 3.9:latest

    just _pyenv-set-global

# ----------------------------------------------------------------
# Useful tailscale/golink shortcuts
# ----------------------------------------------------------------

@open-docs:
    open http://go/docs

@open-go:
    open http://go

@open-ha:
    open http://go/homeassistant

@open-syncthing:
    open http://go/syncthing

# ----------------------------------------------------------------
# TODO: ...
# ----------------------------------------------------------------

# Kill all Chrome tabs to improve performance, decrease battery usage, and save memory.
@kill-tabs:
    bunx kill-tabs

@_update-brewfile:
    cd "$HOME/.homesick/repos/dotfiles/home" && uv run --with cogapp cog -Pr ./Brewfile.cog

@_update-readme-docs:
    cd "$HOME/.homesick/repos/dotfiles" && uv run --with cogapp cog -Pr ./README.md
