set dotenv-load := false
set export := true

host := `hostname -s`

HOMEBREW_NO_ENV_HINTS := "true"

# HOMEBREW_NO_AUTO_UPDATE := "true"

RICH_THEME := "dracula"

# python_37 := `pyenv latest 3.7`

python_38 := `pyenv latest 3.8`
python_39 := `pyenv latest 3.9`
python_310 := `pyenv latest 3.10`
python_311 := `pyenv latest 3.11`
# python_312 := `pyenv latest 3.12-dev`

# ----------------------------------------------------------------
# Just nice-to-haves
# ----------------------------------------------------------------

@_default:
    just --list

# format and overwrite justfile
@fmt:
    just --fmt --unstable

# ----------------------------------------------------------------
# In the spirit of "Scripts to rule them all"
# ----------------------------------------------------------------

# installs/updates all dependencies
@bootstrap:
    if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then \
        echo "==> Installing Homebrew dependencies..."; \
        brew bundle install; \
    fi

    just _xcode-bootstrap
    just _asdf-bootstrap
    just _python-bootstrap

# invoked by continuous integration servers to run tests
@cibuild:
    echo "TODO: cibuild"

# sets up a project to be used for the first time
@setup:
    echo "TODO: setup"

# runs tests
@test:
    echo "TODO: test"

# updates a project to run at its current version
@update:
    just _homebrew-update

# ----------------------------------------------------------------
# General hooks
# ----------------------------------------------------------------

@freeze:
    just _homebrew-freeze

@outdated:
    just _homebrew-outdated
    PIP_REQUIRE_VIRTUALENV=false python -m pip list --outdated

@restart:
    just _homebrew-services-restart

@stop:
    just _homebrew-services-stop

@symlink:
    homesick symlink

@upgrade:
    just _homebrew-update
    just _homebrew-upgrade
    just _homebrew-cleanup

# ----------------------------------------------------------------
# Homebrew and general wrappers - https://brew.sh
# ----------------------------------------------------------------

@_homebrew-cleanup DAYS="0":
    brew cleanup --prune={{ DAYS }}

@_homebrew-freeze:
    cd "$HOME/.homesick/repos/dotfiles/home" && \
        mv Brewfile Brewfile.bak && \
        brew bundle dump

@_homebrew-outdated:
    brew outdated

@homebrew-services:
    brew services

@_homebrew-services-restart:
    # -brew services restart yabai
    # -brew services restart spacebar
    # -brew services restart skhd

@_homebrew-services-stop:
    # -brew services stop yabai
    # -brew services stop spacebar
    # -brew services stop skhd

@_homebrew-update:
    brew update

@_homebrew-upgrade:
    brew upgrade || true

@cleanup DAYS="0":
    just _homebrew-cleanup {{ DAYS }}

# ----------------------------------------------------------------
# asdf - https://asdf-vm.com/
# ----------------------------------------------------------------

@_asdf-bootstrap:
    asdf plugin update golang
    asdf plugin update kubectl
    asdf plugin update nodejs
    asdf plugin update ruby
    asdf plugin update rust

    asdf install golang latest
    asdf install kubectl latest
    asdf install nodejs latest
    asdf install nodejs lts
    asdf install ruby latest
    asdf install rust latest

    asdf reshim

    asdf global golang latest
    asdf global kubectl 1.22.2
    asdf global nodejs latest
    asdf global ruby latest
    asdf global rust latest

    asdf current

    asdf list

@_rtx-bootstrap:
    rtx install golang
    rtx install node
    rtx install ruby
    rtx install rust

    rtx reshim

    # rtx current

    # rtx list

# ----------------------------------------------------------------
# Ollama related
# ----------------------------------------------------------------

@ollama:
    OLLAMA_HOST=0.0.0.0:11434 OLLAMA_ORIGINS=http://* ollama serve

@ollama-download:
    # https://github.com/jmorganca/ollama/blob/main/docs/modelfile.md#valid-parameters-and-values
    # https://github.com/jmorganca/ollama/blob/main/examples/python/client.py
    # https://github.com/jmorganca/ollama/pull/405/files#diff-7f12e314e14b1321e41971e2e84a07a9e200b99b6ecac2a5c7a6b98d887f3305
    just ollama-download-codellama
    just ollama-download-llama2
    just ollama-download-llama2-uncensored

@ollama-download-codeup:
    -ollama pull codeup:latest
    -ollama pull codeup:13b

@ollama-download-codellama:
    -ollama pull codellama:latest
    # -ollama pull codellama:7b-instruct
    -ollama pull codellama:7b-python
    # -ollama pull codellama:13b-instruct
    -ollama pull codellama:13b-python
    # -ollama pull codellama:34b

@ollama-download-falcon:
    -ollama pull falcon:latest
    -ollama pull falcon:7b
    -ollama pull falcon:40b

@ollama-download-llama2-uncensored:
    -ollama pull llama2-uncensored:latest
    -ollama pull llama2-uncensored:7b
    # -ollama pull llama2-uncensored:7b-chat
    # -ollama pull llama2-uncensored:70b

@ollama-download-llama2:
    -ollama pull llama2:latest
    -ollama pull llama2:13b
    # -ollama pull llama2:70b

@ollama-download-wizard-vicuna:
    -ollama pull wizard-vicuna:latest
    # -ollama pull wizard-vicuna-uncensored:30b

# ----------------------------------------------------------------
# Postgres related
# ----------------------------------------------------------------

@postgresql-upgrade:
    brew unpin postgresql
    brew upgrade postgresql
    brew pin postgresql
    brew postgresql-upgrade-database

# ----------------------------------------------------------------
# Python
# ----------------------------------------------------------------

@_python-bootstrap:
    PIP_REQUIRE_VIRTUALENV=false python -m pip install \
            --disable-pip-version-check \
            --no-compile \
            --upgrade \
        pip \
        pipx \
        virtualenv \
        virtualenvwrapper \
        wheel \
        cogapp \
        rich-cli

@python-update:
    just _python-bootstrap

    just _pyenv-update

    just _pyenv-set-global

    # pipx install python-language-server[all]
    # pipx inject python-language-server pyls-black mypy-ls pyls-isort

# ----------------------------------------------------------------
# Python / pip
# ----------------------------------------------------------------
# @pip-update:
#     for version in `pyenv versions --bare`; do \
#         echo "Upgrading Python ${version}"; \
#     done
#
#     eval "$(pyenv init --path)" && eval "$(pyenv init -)" && pyenv shell {{ PYTHON_ALL }}
#
#     # #!/usr/bin/env sh
#     # set -euxo pipefail
#     # for version in `pyenv versions --bare` ; do \
#     #     echo "Upgrading Python ${version}"; \
#     #     # pyenv shell ${version}; \
#     # done
#     # pyenv shell {{ PYTHON_ALL }}
# pipx: https://pypa.github.io/pipx/
# ----------------------------------------------------------------
# Python / pipx - https://pypa.github.io/pipx/
# ----------------------------------------------------------------

@pipx-upgrade:
    pipx upgrade-all --force

# ----------------------------------------------------------------
# Python / pyenv - https://github.com/pyenv/pyenv
# ----------------------------------------------------------------

@_pyenv-set-global:
    pyenv global \
        {{ python_311 }} \
        {{ python_310 }} \
        {{ python_39 }} \
        {{ python_38 }}

@_pyenv-update:
    # git clone https://github.com/pyenv/pyenv-update.git $(pyenv root)/plugins/pyenv-update
    pyenv update

@pyenv-upgrade +ARGS="--skip-existing":
    just pyenv-upgrade-all {{ ARGS }}
    just python-update

@pyenv-upgrade-all +ARGS="--skip-existing":
    # -pyenv install {{ ARGS }} 3.5:latest
    # -pyenv install {{ ARGS }} 3.6:latest
    # -pyenv install {{ ARGS }} 3.7:latest
    -pyenv install {{ ARGS }} 3.8:latest
    -pyenv install {{ ARGS }} 3.9:latest
    -pyenv install {{ ARGS }} 3.10:latest
    -pyenv install {{ ARGS }} 3.11:latest
    # -pyenv install {{ ARGS }} 3.12:latest
    # -pyenv install {{ ARGS }} 2.7:latest

    just _pyenv-set-global

# ----------------------------------------------------------------
# Python / virtualenv - https://virtualenv.pypa.io/en/latest/
# ----------------------------------------------------------------

@virtualenv-scan:
    #!/usr/bin/env python
    import subprocess
    from pathlib import Path

    folders = [folder for folder in Path(Path.home(), ".virtualenvs").glob("*/bin/python")]
    print(len(folders))
    for command in folders:
        print(command)
        try:
            # grab python version
            output = subprocess.run(f"{command} --version".split(), capture_output=True, text=True)
            print(output.stdout.strip() or output.stderr.strip())

            # grab pip version
            # output = subprocess.run(f"{command} --version".replace("python", "pip").split(), capture_output=True, text=True)
            # print(output.stdout.strip() or output.stderr.strip())

        except FileNotFoundError as e:
            pass

@virtualenv-upgrade:
    for filename in $(ls -d ~/.virtualenvs/*/); do \
        echo "$filename"; \
        $filename/bin/python --version; \
        $filename/bin/python -m pip --version; \
        $filename/bin/python -m pip install --upgrade pip; \
        echo; \
    done

    # TODO: finish researching this pattern...
    # https://stackoverflow.com/questions/44692668/python-how-can-i-update-python-version-in-pyenv-virtual-environment

    # pip freeze > requirements.lock
    # pyenv virtualenv-delete a-virtualenv-name
    # pyenv virtualenv 3.9.0 a-virtualenv-name
    # pip install -r requirements.lock
    # rm requirements.lock

@virtualenv-workon:
    for filename in $(ls -d ~/.virtualenvs/*/); do \
        echo "$filename"; \
        $filename/bin/python --version; \
        $filename/bin/python -m pip --version; \
        echo; \
    done

# ----------------------------------------------------------------
# TODO: ...
# ----------------------------------------------------------------

@open-syncthing:
    open http://127.0.0.1:8384

# Kill all Chrome tabs to improve performance, decrease battery usage, and save memory.
@kill-tabs:
    npx kill-tabs

@topalias:
    topalias

@update-readme-docs:
    cd "$HOME/.homesick/repos/dotfiles" && pipx run --spec cogapp cog -Pr ./README.md

# ----------------------------------------------------------------
# Time Machine
# ----------------------------------------------------------------

@timemachine-boost:
    # bump IO priority to finish more quickly
    # https://apple.stackexchange.com/questions/382772/time-machine-in-the-cleaning-up-state-forever

    sudo sysctl debug.lowpri_throttle_enabled=0

@timemachine-boost-complete:
    # once done
    sudo sysctl debug.lowpri_throttle_enabled=1

@timemachine-delete *ARGS:
    sudo tmutil delete {{ ARGS }}

@timemachine-list:
    sudo tmutil listbackups

# ----------------------------------------------------------------
# VS Code
# ----------------------------------------------------------------

@_vs_code-freeze:
    code --list-extensions > vs-code-extensions.txt

# ----------------------------------------------------------------
# Xcode
# ----------------------------------------------------------------

@_xcode-bootstrap:
    sudo xcode-select --install

@xcode-upgrade:
    sudo rm -rf /Library/Developer/CommandLineTools
    just _xcode-bootstrap

# ----------------------------------------------------------------
# virtualenvwrapper
# ----------------------------------------------------------------

_get_env_details:
    #!/usr/bin/env sh
    rich --print "[green]get_env_details[/green]"

_initialize:
    #!/usr/bin/env sh
    rich --print "[green]initialize[/green]"

_postactivate:
    #!/usr/bin/env sh
    VIRTUAL_ENV_NAME=$(basename "${VIRTUAL_ENV}")
    rich --print "[green]postactivate[/green]"

_postdeactivate:
    #!/usr/bin/env sh
    # VIRTUAL_ENV_NAME=$(basename "${VIRTUAL_ENV}")
    rich --print "[green]postdeactivate[/green]"

_postmkproject:
    #!/usr/bin/env sh
    rich --print "[green]postmkproject[/green]"

_postmkvirtualenv:
    #!/usr/bin/env sh
    rich --print "[green]postmkvirtualenv[/green]"
    python -m pip install --upgrade pip
    python -m pip install --upgrade pip-tools

_postrmproject:
    #!/usr/bin/env sh
    rich --print "[green]postrmproject[/green]"

_postrmvirtualenv:
    #!/usr/bin/env sh
    rich --print "[green]postrmvirtualenv[/green]"

_preactivate:
    #!/usr/bin/env sh
    # VIRTUAL_ENV_NAME=$(basename "${VIRTUAL_ENV}")
    rich --print "[green]preactivate[/green]"

_predeactivate:
    #!/usr/bin/env sh
    rich --print "[green]predeactivate[/green]"

_premkproject:
    #!/usr/bin/env sh
    rich --print "[green]premkproject[/green]"

_premkvirtualenv:
    #!/usr/bin/env sh
    rich --print "[green]premkvirtualenv[/green]"

_prermproject:
    #!/usr/bin/env sh
    rich --print "[green]prermproject[/green]"

_prermvirtualenv:
    #!/usr/bin/env sh
    rich --print "[green]prermvirtualenv[/green]"
