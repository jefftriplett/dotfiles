#!/bin/bash

VIRTUAL_ENV_NAME=$(basename "${VIRTUAL_ENV}")
VIRTUAL_ENV_BIN="${VIRTUAL_ENV}/bin"
VIRTUAL_ENV_SRC="${VIRTUAL_ENV}/src"

if [ -d "${VIRTUAL_ENV_SRC}" ]; then
  # If our {{virtualenv}}/src folder exists, CD into that folder
  cd "${VIRTUAL_ENV_SRC}" || exit
else
  # If our {{virtualenv}}/src folder does not exist, let's create it
  mkdir -p "${VIRTUAL_ENV_SRC}"
  cd "${VIRTUAL_ENV_SRC}" || exit

  # Add {{virtualenv}}/src to our virtualenv
  add2virtualenv .

  # Create direnv file for our project
  touch .envrc

  # Let's set some default ENV values
  echo "export COMPOSE_DOCKER_CLI_BUILD=1" >> .envrc
  echo "export DOCKER_BUILDKIT=1" >> .envrc
  echo "export PIP_DISABLE_PIP_VERSION_CHECK=1" >> .envrc
  echo "export PYTHONDONTWRITEBYTECODE=1" >> .envrc
  echo "export PYTHONUNBUFFERED=1" >> .envrc

  # Run direnv to allow list our new ENV values
  if ! [ -e direnv ]; then
    direnv allow
  fi
fi

# Create a SublimeText Project for our project
SUBLIME_TEXT_PROJECT_PATH="${HOME}/Library/Application Support/Sublime Text 3/Packages/User/Projects"
PROJECT_FILE="${SUBLIME_TEXT_PROJECT_PATH}/${VIRTUAL_ENV_NAME}.sublime-project"
CONTINUE=false

if ! [ -e "${PROJECT_FILE}" ]; then
  echo "Would you like to create a new SublimeText project for this virtualenv?"
  CONFIRM=$(gum choose "yes" "no")

  echo

  if [[ $CONFIRM =~ "yes" ]]; then
    CONTINUE=true
  fi

  if $CONTINUE; then
    if ! [ -e jq ]; then
      echo "Creating ${PROJECT_FILE}"
      echo "{\"folders\": [{\"path\": \"${VIRTUAL_ENV_SRC}\"}]}" | jq > "${PROJECT_FILE}"
    fi
  fi
fi

# Set our iTerm2 tab's title to our virtualenv name
#   `npm install -g iterm2-tab-set`
if ! [ -e tabset ]; then
  tabset --title "${VIRTUAL_ENV_NAME}"
fi

# Print our virtualenv's virtualenv name to the console
#   `go get github.com/arsham/figurine`
if ! [ -e figurine ]; then
  figurine "${VIRTUAL_ENV_NAME}"
fi
