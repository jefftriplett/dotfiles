#!/bin/bash
# This hook is run before a new project is activated.

VIRTUAL_ENV_NAME=$(basename "${VIRTUAL_ENV}")
VIRTUAL_ENV_BIN="${VIRTUAL_ENV}/bin"
VIRTUAL_ENV_ENVRC="${VIRTUAL_ENV_SRC}/.envrc"
VIRTUAL_ENV_SRC="${VIRTUAL_ENV}/src"
VIRTUAL_ENV_STIGNORE="${VIRTUAL_ENV_SRC}/.stignore"

PROJECT_SRC="${PROJECT_HOME}/${VIRTUAL_ENV_NAME}"
PROJECT_ENVRC="${PROJECT_SRC}/.envrc"
PROJECT_PYRIGHTCONFIG="${PROJECT_SRC}/pyrightconfig.json"

# ------------------------------------------------------------
# Handle project directories - Support for PROJECT_HOME
# ------------------------------------------------------------

# Warn if both PROJECT_SRC and VIRTUAL_ENV_SRC exist
if [ -d "${PROJECT_SRC}" ] && [ -d "${VIRTUAL_ENV_SRC}" ]; then
  echo "WARNING: Both PROJECT_SRC (${PROJECT_SRC}) and VIRTUAL_ENV_SRC (${VIRTUAL_ENV_SRC}) exist."
  echo "This may cause confusion about which directory is the primary source location."
fi

if [ -d "${PROJECT_SRC}" ]; then
  cd "${PROJECT_SRC}" || exit
else
  # Fall back to the original behavior
  if [ -d "${VIRTUAL_ENV_SRC}" ]; then
    # If our {{virtualenv}}/src folder exists, CD into that folder
    cd "${VIRTUAL_ENV_SRC}" || exit
  else
    # If our {{virtualenv}}/src folder does not exist, let's create it
    mkdir -p "${VIRTUAL_ENV_SRC}"
    cd "${VIRTUAL_ENV_SRC}" || exit

    # Add {{virtualenv}}/src to our virtualenv
    add2virtualenv .
  fi
fi

# ------------------------------------------------------------
# Syncthing ".envrc" file...
# ------------------------------------------------------------

if [ -e "${PROJECT_SRC}" ] && [ ! -f "${PROJECT_ENVRC}" ]; then
  # Create direnv file for our project
  touch .envrc

  # Let's set some default ENV values
  cat > "${PROJECT_ENVRC}" <<'EOF'
export DOCKER_CONTEXT=orbstack
export PIP_DISABLE_PIP_VERSION_CHECK=1
export PYTHONDONTWRITEBYTECODE=1
export PYTHONUNBUFFERED=1
EOF

  # Run direnv to allow list our new ENV values
  if command -v direnv >/dev/null 2>&1; then
    direnv allow
  fi
fi

# ------------------------------------------------------------
# Syncthing ".stignore" file...
# ------------------------------------------------------------

if [ -e "${VIRTUAL_ENV_SRC}" ] && [ ! -e "${VIRTUAL_ENV_STIGNORE}" ]; then
  cat > "${VIRTUAL_ENV_STIGNORE}" <<'EOF'
*.override.yml
*.pyc
*.pyi
.*-cache/
.*cache/
.DS_Store
.envrc
.jekyll-cache/
.mypy_cache/
.nox/
.pytest_cache/
.ruff_cache/
.sass-cache/
.stignore
.vendor/
.venv/
checkouts
compose.override.yml
docker-compose.override.yml
pyrightconfig.json
EOF
fi

# ------------------------------------------------------------
# Sublime Text Project create folder
# ------------------------------------------------------------

PARENT_DIR="${HOME}/Library/Application Support/Sublime Text/Packages/User"
SUBLIME_TEXT_PROJECT_PATH="${PARENT_DIR}/Projects"

if [ -d "${PARENT_DIR}" ]; then
  if [ ! -d "${SUBLIME_TEXT_PROJECT_PATH}" ]; then
    mkdir "${SUBLIME_TEXT_PROJECT_PATH}"
  fi
else
  echo "Parent directory does not exist: ${PARENT_DIR}"
fi

# ------------------------------------------------------------
# Sublime Text Project ".sublime-project" file...
# ------------------------------------------------------------

PROJECT_FILE="${SUBLIME_TEXT_PROJECT_PATH}/${VIRTUAL_ENV_NAME}.sublime-project"

if ! [ -f "${PROJECT_FILE}" ]; then
  if ! [ -e jq ]; then
    echo "Creating ${PROJECT_FILE}"
    echo "{\"folders\": [{\"path\": \"${PROJECT_SRC}\"}]}" | jq > "${PROJECT_FILE}"
  fi
fi

# ------------------------------------------------------------
# Sublime Text LSP PyRight ".pyrightconfig.json" file...
# ------------------------------------------------------------
if [[ -e "$PROJECT_SRC" && ! -f "$PROJECT_PYRIGHTCONFIG" ]]; then
  if ! [ -e jq ]; then
    echo "Creating ${PROJECT_PYRIGHTCONFIG}"
    echo "{\"venvPath\": \"/Users/jefftriplett/.virtualenvs\", \"venv\": \"${VIRTUAL_ENV_NAME}\"}" | jq > "${PROJECT_PYRIGHTCONFIG}"
  fi
fi

# just --justfile=${HOME}/justfile virtualenvwrapper::postactivate
