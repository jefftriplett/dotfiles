#!/bin/bash

VIRTUAL_ENV_NAME=$(basename "${VIRTUAL_ENV}")
VIRTUAL_ENV_BIN="${VIRTUAL_ENV}/bin"
VIRTUAL_ENV_SRC="${VIRTUAL_ENV}/src"
VIRTUAL_ENV_ENVRC="${VIRTUAL_ENV_SRC}/.envrc"
VIRTUAL_ENV_PYRIGHTCONFIG="${VIRTUAL_ENV_SRC}/pyrightconfig.json"
VIRTUAL_ENV_STIGNORE="${VIRTUAL_ENV_SRC}/.stignore"

if [ -d "${VIRTUAL_ENV_SRC}" ]; then
  # If our {{virtualenv}}/src folder exists, CD into that folder
  cd "${VIRTUAL_ENV_SRC}" || exit
else
  # If our {{virtualenv}}/src folder does not exist, let's create it
  mkdir -p "${VIRTUAL_ENV_SRC}"
  cd "${VIRTUAL_ENV_SRC}" || exit

  # Add {{virtualenv}}/src to our virtualenv
  add2virtualenv .
fi

if ! [ -e "${VIRTUAL_ENV_ENVRC}" ]; then
  # Create direnv file for our project
  touch .envrc

  # Let's set some default ENV values
  # echo "export COMPOSE_DOCKER_CLI_BUILD=1" >> .envrc
  # echo "export DOCKER_BUILDKIT=1" >> .envrc
  echo "export DOCKER_CONTEXT=desktop-linux" >> .envrc
  echo "export PIP_DISABLE_PIP_VERSION_CHECK=1" >> .envrc
  echo "export PYTHONDONTWRITEBYTECODE=1" >> .envrc
  echo "export PYTHONUNBUFFERED=1" >> .envrc

  # Run direnv to allow list our new ENV values
  if ! [ -e direnv ]; then
    direnv allow
  fi
fi

# Syncthing .stignore file...

if ! [ -e "${VIRTUAL_ENV_STIGNORE}" ]; then
    touch ${VIRTUAL_ENV_STIGNORE}
    echo "*.pyc" >> ${VIRTUAL_ENV_STIGNORE}
    echo "*.pyi" >> ${VIRTUAL_ENV_STIGNORE}
    echo ".*-cache/" >> ${VIRTUAL_ENV_STIGNORE}
    echo ".*cache/" >> ${VIRTUAL_ENV_STIGNORE}
    echo ".DS_Store" >> ${VIRTUAL_ENV_STIGNORE}
    echo ".envrc" >> ${VIRTUAL_ENV_STIGNORE}
    echo ".jekyll-cache/" >> ${VIRTUAL_ENV_STIGNORE}
    echo ".mypy_cache/" >> ${VIRTUAL_ENV_STIGNORE}
    echo ".nox/" >> ${VIRTUAL_ENV_STIGNORE}
    echo ".pytest_cache/" >> ${VIRTUAL_ENV_STIGNORE}
    echo ".ruff_cache/" >> ${VIRTUAL_ENV_STIGNORE}
    echo ".sass-cache/" >> ${VIRTUAL_ENV_STIGNORE}
    echo ".vendor/" >> ${VIRTUAL_ENV_STIGNORE}
    echo "checkouts" >> ${VIRTUAL_ENV_STIGNORE}
    echo "docker-compose.override.yml" >> ${VIRTUAL_ENV_STIGNORE}
    echo "pyrightconfig.json" >> ${VIRTUAL_ENV_STIGNORE}
fi

# Create a SublimeText Project for our project
# if [ -d "${HOME}/Library/Application Support/Sublime Text 3/Packages/User/Projects" ]; then
#   SUBLIME_TEXT_PROJECT_PATH="${HOME}/Library/Application Support/Sublime Text 3/Packages/User/Projects"
# if [ -d "${HOME}/Library/Application Support/Sublime Text/Packages/User/Projects" ]; then
#   SUBLIME_TEXT_PROJECT_PATH="${HOME}/Library/Application Support/Sublime Text/Packages/User/Projects"
# fi

PARENT_DIR="${HOME}/Library/Application Support/Sublime Text/Packages/User"
SUBLIME_TEXT_PROJECT_PATH="${PARENT_DIR}/Projects"

if [ -d "${PARENT_DIR}" ]; then
  if [ ! -d "${SUBLIME_TEXT_PROJECT_PATH}" ]; then
    mkdir "${SUBLIME_TEXT_PROJECT_PATH}"
  fi
else
  echo "Parent directory does not exist: ${PARENT_DIR}"
fi

# ------------------------------------------------------------
# Sublime Text Project ".sublime-project" file...
# ------------------------------------------------------------

PROJECT_FILE="${SUBLIME_TEXT_PROJECT_PATH}/${VIRTUAL_ENV_NAME}.sublime-project"
CONTINUE=false

if ! [ -e "${PROJECT_FILE}" ]; then
  echo "Would you like to create a new SublimeText project for this virtualenv?"
  CONFIRM=$(gum choose "yes" "no" --selected="yes")

  echo

  if [[ $CONFIRM =~ "yes" ]]; then
    CONTINUE=true
  fi

  if $CONTINUE; then
    if ! [ -e jq ]; then
      echo "Creating ${PROJECT_FILE}"
      echo "{\"folders\": [{\"path\": \"${VIRTUAL_ENV_SRC}\"}]}" | jq > "${PROJECT_FILE}"
    fi
  fi
fi

if ! [ -e "${VIRTUAL_ENV_PYRIGHTCONFIG}" ]; then
  if ! [ -e jq ]; then
    echo "Creating ${VIRTUAL_ENV_PYRIGHTCONFIG}"
    echo "{\"venvPath\": \"/Users/jefftriplett/.virtualenvs\", \"venv\": \"${VIRTUAL_ENV_NAME}\"}" | jq > "${VIRTUAL_ENV_PYRIGHTCONFIG}"
  fi
fi

# Set our iTerm2 tab's title to our virtualenv name
#   `npm install -g iterm2-tab-set`
if ! [ -e tabset ]; then
  npx iterm2-tab-set --title "${VIRTUAL_ENV_NAME}"
fi

# Print our virtualenv's virtualenv name to the console
#   `go install github.com/arsham/figurine@latest`
# if ! [ -e figurine ]; then
#   figurine "${VIRTUAL_ENV_NAME}"
# fi

just --justfile=${HOME}/justfile _postactivate
